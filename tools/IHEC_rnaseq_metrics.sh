#!/bin/bash

set -euf -o pipefail 

# Computation of IHEC RNA-seq quality metrics
# From Sebastain Ullirch <seba.ull@gmail.com>
# Originally from https://github.com/IHEC/ihec-assay-standards/tree/master/RNASeqQC
# reimplemented by mathieu.bourgey@mcgill.ca - 26/07/2017 
#mv samtools to sambamba
# module to load sambamba picard

if [ $# -lt 4 ]; then
  echo
  echo "   USAGE: $0 <SAMPLE_PATH> <SAMPLE_NAME> <DUPLICATE_METRICS_PATH> <INTERGENIC_BED> <RRNA_BED> <OUTPUT_DIR>"
  echo "   The script computes RNA-seq qualtity metrics according to IHEC standards"
  echo ""
  echo "   Input files in the following order are required:"
  echo "   1. Path to BAM file to be analyzed"
  echo "   2. Sample name"
  echo "   3. Path to the duplicate metrics file from picard MarkDuplicates"
  echo "   4. Bed file with intergenic coordinates"
  echo "   5. Bed file with rRNA coordinates"
  echo "   6. Output directory"
  echo
  exit 1
fi


SAMPLE_PATH=$1
SAMPLE_NAME=$2
PICARD_MARK_DUP_METRICS=$3
INTERGENIC_BED=$4
RRNA_BED=$5
OUTPUT_DIR=$6



#computation of IHEC RNA-seq stats
#get the fraction of mapped reads
MAPPED_READS=$(sambamba view -c -F 0x904 $SAMPLE_PATH) 

N_NO_MULTIMAP=$(sambamba view -b -c -F 0x900 $SAMPLE_PATH)

echo $N_NO_MULTIMAP | awk -v MAPPED_READS=$MAPPED_READS '{print "FRACTION_MAPPED\t"MAPPED_READS/$1}' > ${OUTPUT_DIR}/${SAMPLE_NAME}.read_stats.txt

#get the number of reads falling into intergenic regions with samtools
sambamba view -c -F 0x900 $SAMPLE_PATH -L $INTERGENIC_BED | awk -v MAPPED_READS=$MAPPED_READS '{print "FRACTION_INTERGENIC\t"$1/MAPPED_READS}' >> ${OUTPUT_DIR}/${SAMPLE_NAME}.read_stats.txt

#get the number of reads from rRNA with samtools
sambamba view -c -F 0x900 $SAMPLE_PATH -L $RRNA_BED | awk -v MAPPED_READS=$MAPPED_READS '{print "FRACTION_RRNA\t"$1/MAPPED_READS}' >> ${OUTPUT_DIR}/${SAMPLE_NAME}.read_stats.txt

#get number of duplicatesIHEC
#Already generated by the pipeline
# PICARD_MARK_DUP_CMD="java -Xmx4g -jar $PICARD_290/picard.jar MarkDuplicates VALIDATION_STRINGENCY=LENIENT I=$SAMPLE_PATH O=${SAMPLE_NAME}_noMULTI_noDUP.bam M=${SAMPLE_NAME}_duplicated.txt"
# #add -TMP_DIR argument to mark dups so avoid running out of space. 
# if [[ -z $TMP_DIR ]]; then
#   $PICARD_MARK_DUP_CMD
# else
#   TEMP="$TMP_DIR/$SAMPLE_NAME/temp"
#   mkdir -p $TEMP || true
#   $PICARD_MARK_DUP_CMD TMP_DIR=$TEMP
# fi  
cp ${PICARD_MARK_DUP_METRICS} ${OUTPUT_DIR}/${SAMPLE_NAME}.duplicated.txt